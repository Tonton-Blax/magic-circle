(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.Chota = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function subscribe(store, callback) {
        const unsub = store.subscribe(callback);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        return definition[2] && fn
            ? $$scope.dirty | definition[2](fn(dirty))
            : $$scope.dirty;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function xlink_attr(node, attribute, value) {
        node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function claim_element(nodes, name, attributes, svg) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeName === name) {
                for (let j = 0; j < node.attributes.length; j += 1) {
                    const attribute = node.attributes[j];
                    if (!attributes[attribute.name])
                        node.removeAttribute(attribute.name);
                }
                return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes
            }
        }
        return svg ? svg_element(name) : element(name);
    }
    function claim_text(nodes, data) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeType === 3) {
                node.data = '' + data;
                return nodes.splice(i, 1)[0];
            }
        }
        return text(data);
    }
    function claim_space(nodes) {
        return claim_text(nodes, ' ');
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.data !== data)
            text.data = data;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let stylesheet;
    let active = 0;
    let current_rules = {};
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        if (!current_rules[name]) {
            if (!stylesheet) {
                const style = element('style');
                document.head.appendChild(style);
                stylesheet = style.sheet;
            }
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        node.style.animation = (node.style.animation || '')
            .split(', ')
            .filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        )
            .join(', ');
        if (name && !--active)
            clear_rules();
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            current_rules = {};
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            callbacks.slice().forEach(fn => fn(event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function flush() {
        const seen_callbacks = new Set();
        do {
            // first, call beforeUpdate functions
            // and update components
            while (dirty_components.length) {
                const component = dirty_components.shift();
                set_current_component(component);
                update(component.$$);
            }
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    callback();
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            $$.fragment && $$.fragment.p($$.ctx, $$.dirty);
            $$.dirty = [-1];
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = program.b - t;
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }
    function create_component(block) {
        block && block.c();
    }
    function claim_component(block, parent_nodes) {
        block && block.l(parent_nodes);
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, value = ret) => {
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(children(options.target));
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function isArray(obj) {
        return Object.prototype.toString.call(obj) === '[object Array]'
    }
    function getEventsAction(component) {
        return node => {
          const events = Object.keys(component.$$.callbacks);
          const listeners = [];

          events.forEach(
              event => listeners.push(
                  listen(node, event, e =>  bubble(component, e))
                )
            );
      
          return {
            destroy: () => {
                listeners.forEach(
                    listener => listener()
                );
            }
          }
        };
    }


    function getAttributesAction(component) {

        const isSet = (value) => {
            return ( 
                value !== undefined && 
                value !== false &&
                value !== null
            )
        };

        const getArrayFromString = (value) => {
            if(typeof value != 'string') return [];
            return value.replace(/\s+/g, ' ').trim().split(' ');
        };

        return (node,mixed) => {
            const props = component.$$.props;
            const attributes = Object.keys(mixed).filter(name => !props.hasOwnProperty(name));

            
            let lastClasslist = [];
            const updateClasses = (list) => {
                let currentClasslist = [];
                if( isSet(list['class'])) currentClasslist = currentClasslist.concat(getArrayFromString(list['class']));

                for(let i in lastClasslist) {
                    if(currentClasslist.indexOf(lastClasslist[i]) === -1) node.classList.remove(lastClasslist[i]);
                }

                for(let i in currentClasslist) {
                    if(lastClasslist.indexOf(currentClasslist[i]) === -1) node.classList.add(currentClasslist[i]);
                }
                
                lastClasslist = currentClasslist;
            };

            const updateAttr = (list) => {
                attributes.forEach(name => {
                    const value = list[name];
                    if(name === 'class') {
                        updateClasses(list);
                    } else {
                        if( isSet(value) )
                            node.setAttribute(name, value);
                        else
                            node.removeAttribute(name);
                    }
                });
            };

            updateAttr(mixed);

            return {
                update: (mixed) => updateAttr(mixed),
                destroy: () => {
                    attributes.forEach(name => {
                        node.removeAttribute(name);
                    });
                }
            }
        };
    }

    /* cmp/Container.svelte generated by Svelte v3.16.0 */

    function create_fragment(ctx) {
    	let div;
    	let events_action;
    	let attrs_action;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "container");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			events_action = /*events*/ ctx[0].call(null, div) || ({});
    			attrs_action = /*attrs*/ ctx[1].call(null, div, /*$$props*/ ctx[2]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 8) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 4) attrs_action.update.call(null, /*$$props*/ ctx[2]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);
    	return [events, attrs, $$props, $$scope, $$slots];
    }

    class Container extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, create_fragment, safe_not_equal, {});
    	}
    }

    /* cmp/Nav.svelte generated by Svelte v3.16.0 */

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-a8gbht-style";
    	style.textContent = "nav.svelte-a8gbht{width:100%;flex-direction:row}.nav-left{justify-content:flex-start\n\t}.nav-right{justify-content:flex-end\n\t}";
    	append(document.head, style);
    }

    const get_right_slot_changes = dirty => ({});
    const get_right_slot_context = ctx => ({});
    const get_center_slot_changes = dirty => ({});
    const get_center_slot_context = ctx => ({});
    const get_left_slot_changes = dirty => ({});
    const get_left_slot_context = ctx => ({});

    // (14:0) {#if is_left}
    function create_if_block_2(ctx) {
    	let div;
    	let current;
    	const left_slot_template = /*$$slots*/ ctx[7].left;
    	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[6], get_left_slot_context);

    	return {
    		c() {
    			div = element("div");
    			if (left_slot) left_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (left_slot) left_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "nav-left");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (left_slot) {
    				left_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (left_slot && left_slot.p && dirty & /*$$scope*/ 64) {
    				left_slot.p(get_slot_context(left_slot_template, ctx, /*$$scope*/ ctx[6], get_left_slot_context), get_slot_changes(left_slot_template, /*$$scope*/ ctx[6], dirty, get_left_slot_changes));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(left_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(left_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (left_slot) left_slot.d(detaching);
    		}
    	};
    }

    // (19:0) {#if is_center}
    function create_if_block_1(ctx) {
    	let div;
    	let current;
    	const center_slot_template = /*$$slots*/ ctx[7].center;
    	const center_slot = create_slot(center_slot_template, ctx, /*$$scope*/ ctx[6], get_center_slot_context);

    	return {
    		c() {
    			div = element("div");
    			if (center_slot) center_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (center_slot) center_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "nav-center");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (center_slot) {
    				center_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (center_slot && center_slot.p && dirty & /*$$scope*/ 64) {
    				center_slot.p(get_slot_context(center_slot_template, ctx, /*$$scope*/ ctx[6], get_center_slot_context), get_slot_changes(center_slot_template, /*$$scope*/ ctx[6], dirty, get_center_slot_changes));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(center_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(center_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (center_slot) center_slot.d(detaching);
    		}
    	};
    }

    // (24:0) {#if is_right}
    function create_if_block(ctx) {
    	let div;
    	let current;
    	const right_slot_template = /*$$slots*/ ctx[7].right;
    	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[6], get_right_slot_context);

    	return {
    		c() {
    			div = element("div");
    			if (right_slot) right_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (right_slot) right_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "nav-right");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (right_slot) {
    				right_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (right_slot && right_slot.p && dirty & /*$$scope*/ 64) {
    				right_slot.p(get_slot_context(right_slot_template, ctx, /*$$scope*/ ctx[6], get_right_slot_context), get_slot_changes(right_slot_template, /*$$scope*/ ctx[6], dirty, get_right_slot_changes));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(right_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(right_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (right_slot) right_slot.d(detaching);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let nav;
    	let t0;
    	let t1;
    	let events_action;
    	let attrs_action;
    	let current;
    	let if_block0 = /*is_left*/ ctx[2] && create_if_block_2(ctx);
    	let if_block1 = /*is_center*/ ctx[3] && create_if_block_1(ctx);
    	let if_block2 = /*is_right*/ ctx[4] && create_if_block(ctx);

    	return {
    		c() {
    			nav = element("nav");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			this.h();
    		},
    		l(nodes) {
    			nav = claim_element(nodes, "NAV", { class: true });
    			var nav_nodes = children(nav);
    			if (if_block0) if_block0.l(nav_nodes);
    			t0 = claim_space(nav_nodes);
    			if (if_block1) if_block1.l(nav_nodes);
    			t1 = claim_space(nav_nodes);
    			if (if_block2) if_block2.l(nav_nodes);
    			nav_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(nav, "class", "nav svelte-a8gbht");
    		},
    		m(target, anchor) {
    			insert(target, nav, anchor);
    			if (if_block0) if_block0.m(nav, null);
    			append(nav, t0);
    			if (if_block1) if_block1.m(nav, null);
    			append(nav, t1);
    			if (if_block2) if_block2.m(nav, null);
    			events_action = /*events*/ ctx[0].call(null, nav) || ({});
    			attrs_action = /*attrs*/ ctx[1].call(null, nav, /*$$props*/ ctx[5]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*is_left*/ ctx[2]) if_block0.p(ctx, dirty);
    			if (/*is_center*/ ctx[3]) if_block1.p(ctx, dirty);
    			if (/*is_right*/ ctx[4]) if_block2.p(ctx, dirty);
    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 32) attrs_action.update.call(null, /*$$props*/ ctx[5]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(nav);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let is_left = $$props.$$slots.left !== undefined;
    	let is_center = $$props.$$slots.center !== undefined;
    	let is_right = $$props.$$slots.right !== undefined;
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);
    	return [events, attrs, is_left, is_center, is_right, $$props, $$scope, $$slots];
    }

    class Nav extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-a8gbht-style")) add_css();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    	}
    }

    /* cmp/Row.svelte generated by Svelte v3.16.0 */

    function create_fragment$2(ctx) {
    	let div;
    	let events_action;
    	let attrs_action;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "row");
    			toggle_class(div, "reverse", /*reverse*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			events_action = /*events*/ ctx[1].call(null, div) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, div, /*$$props*/ ctx[3]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 16) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 8) attrs_action.update.call(null, /*$$props*/ ctx[3]);

    			if (dirty & /*reverse*/ 1) {
    				toggle_class(div, "reverse", /*reverse*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { reverse = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("reverse" in $$new_props) $$invalidate(0, reverse = $$new_props.reverse);
    		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);
    	return [reverse, events, attrs, $$props, $$scope, $$slots];
    }

    class Row extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { reverse: 0 });
    	}
    }

    /* cmp/Col.svelte generated by Svelte v3.16.0 */

    function create_fragment$3(ctx) {
    	let div;
    	let events_action;
    	let attrs_action;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (default_slot) default_slot.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", /*classes*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			events_action = /*events*/ ctx[1].call(null, div) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, div, /*$$props*/ ctx[3]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 256) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    			}

    			if (!current || dirty & /*classes*/ 1) {
    				attr(div, "class", /*classes*/ ctx[0]);
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 8) attrs_action.update.call(null, /*$$props*/ ctx[3]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { size = false } = $$props;
    	let { sizeMD = false } = $$props;
    	let { sizeLG = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);

    	function get_col_classes(d, md, lg) {
    		let list = [];
    		if (!size || (size < 1 || size > 12)) list.push("col"); else if (size >= 1 && size <= 12) list.push(`col-${size}`);
    		if (sizeMD) if (sizeMD >= 1 && sizeMD <= 12) list.push(`col-${sizeMD}-md`);
    		if (sizeLG) if (sizeLG >= 1 && sizeLG <= 12) list.push(`col-${sizeLG}-lg`);
    		return list.join(" ");
    	}

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("size" in $$new_props) $$invalidate(4, size = $$new_props.size);
    		if ("sizeMD" in $$new_props) $$invalidate(5, sizeMD = $$new_props.sizeMD);
    		if ("sizeLG" in $$new_props) $$invalidate(6, sizeLG = $$new_props.sizeLG);
    		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	let classes;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*size, sizeMD, sizeLG*/ 112) {
    			 $$invalidate(0, classes = get_col_classes());
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		classes,
    		events,
    		attrs,
    		$$props,
    		size,
    		sizeMD,
    		sizeLG,
    		get_col_classes,
    		$$scope,
    		$$slots
    	];
    }

    class Col extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { size: 4, sizeMD: 5, sizeLG: 6 });
    	}
    }

    /* cmp/Card.svelte generated by Svelte v3.16.0 */
    const get_footer_slot_changes = dirty => ({});
    const get_footer_slot_context = ctx => ({});
    const get_header_slot_changes = dirty => ({});
    const get_header_slot_context = ctx => ({});

    // (13:0) {#if is_header}
    function create_if_block_1$1(ctx) {
    	let header;
    	let current;
    	const header_slot_template = /*$$slots*/ ctx[6].header;
    	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[5], get_header_slot_context);

    	return {
    		c() {
    			header = element("header");
    			if (header_slot) header_slot.c();
    		},
    		l(nodes) {
    			header = claim_element(nodes, "HEADER", {});
    			var header_nodes = children(header);
    			if (header_slot) header_slot.l(header_nodes);
    			header_nodes.forEach(detach);
    		},
    		m(target, anchor) {
    			insert(target, header, anchor);

    			if (header_slot) {
    				header_slot.m(header, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (header_slot && header_slot.p && dirty & /*$$scope*/ 32) {
    				header_slot.p(get_slot_context(header_slot_template, ctx, /*$$scope*/ ctx[5], get_header_slot_context), get_slot_changes(header_slot_template, /*$$scope*/ ctx[5], dirty, get_header_slot_changes));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(header_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(header_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(header);
    			if (header_slot) header_slot.d(detaching);
    		}
    	};
    }

    // (19:0) {#if is_footer}
    function create_if_block$1(ctx) {
    	let footer;
    	let current;
    	const footer_slot_template = /*$$slots*/ ctx[6].footer;
    	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[5], get_footer_slot_context);

    	return {
    		c() {
    			footer = element("footer");
    			if (footer_slot) footer_slot.c();
    		},
    		l(nodes) {
    			footer = claim_element(nodes, "FOOTER", {});
    			var footer_nodes = children(footer);
    			if (footer_slot) footer_slot.l(footer_nodes);
    			footer_nodes.forEach(detach);
    		},
    		m(target, anchor) {
    			insert(target, footer, anchor);

    			if (footer_slot) {
    				footer_slot.m(footer, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (footer_slot && footer_slot.p && dirty & /*$$scope*/ 32) {
    				footer_slot.p(get_slot_context(footer_slot_template, ctx, /*$$scope*/ ctx[5], get_footer_slot_context), get_slot_changes(footer_slot_template, /*$$scope*/ ctx[5], dirty, get_footer_slot_changes));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(footer_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(footer_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(footer);
    			if (footer_slot) footer_slot.d(detaching);
    		}
    	};
    }

    function create_fragment$4(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let events_action;
    	let attrs_action;
    	let current;
    	let if_block0 = /*is_header*/ ctx[2] && create_if_block_1$1(ctx);
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let if_block1 = /*is_footer*/ ctx[3] && create_if_block$1(ctx);

    	return {
    		c() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			if (if_block0) if_block0.l(div_nodes);
    			t0 = claim_space(div_nodes);
    			if (default_slot) default_slot.l(div_nodes);
    			t1 = claim_space(div_nodes);
    			if (if_block1) if_block1.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div, "class", "card");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append(div, t0);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append(div, t1);
    			if (if_block1) if_block1.m(div, null);
    			events_action = /*events*/ ctx[0].call(null, div) || ({});
    			attrs_action = /*attrs*/ ctx[1].call(null, div, /*$$props*/ ctx[4]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*is_header*/ ctx[2]) if_block0.p(ctx, dirty);

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 32) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
    			}

    			if (/*is_footer*/ ctx[3]) if_block1.p(ctx, dirty);
    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 16) attrs_action.update.call(null, /*$$props*/ ctx[4]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (if_block0) if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block1) if_block1.d();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$4($$self, $$props, $$invalidate) {
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let is_header = $$props.$$slots.header !== undefined;
    	let is_footer = $$props.$$slots.footer !== undefined;
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);
    	return [events, attrs, is_header, is_footer, $$props, $$scope, $$slots];
    }

    class Card extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    	}
    }

    /* cmp/Icon.svelte generated by Svelte v3.16.0 */

    function add_css$1() {
    	var style = element("style");
    	style.id = "svelte-1q4wean-style";
    	style.textContent = "@keyframes svelte-1q4wean-spin{to{transform:rotate(360deg) }}@keyframes svelte-1q4wean-spin-inverse{to{transform:rotate(-360deg) }}svg.svelte-1q4wean{vertical-align:middle}span.svelte-1q4wean{display:inline-block;line-height:1}span.svelte-1q4wean img.svelte-1q4wean{padding:0px;margin:0px;vertical-align:middle}.spinCW.svelte-1q4wean{animation:svelte-1q4wean-spin linear 2s infinite;transform-origin:center}.spinCCW.svelte-1q4wean{animation:svelte-1q4wean-spin-inverse linear 2s infinite;transform-origin:center}";
    	append(document.head, style);
    }

    // (81:0) {:else}
    function create_else_block(ctx) {
    	let svg;
    	let events_action;
    	let attrs_action;

    	function select_block_type_1(ctx, dirty) {
    		if (/*spin*/ ctx[0] !== false) return create_if_block_2$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			svg = svg_element("svg");
    			if_block.c();
    			this.h();
    		},
    		l(nodes) {
    			svg = claim_element(nodes, "svg", { viewBox: true, style: true, class: true }, 1);
    			var svg_nodes = children(svg);
    			if_block.l(svg_nodes);
    			svg_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(svg, "viewBox", "0 0 24 24");
    			attr(svg, "style", /*style*/ ctx[6]);
    			attr(svg, "class", "svelte-1q4wean");
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			if_block.m(svg, null);
    			events_action = /*events*/ ctx[8].call(null, svg) || ({});
    			attrs_action = /*attrs*/ ctx[9].call(null, svg, /*$$props*/ ctx[10]) || ({});
    		},
    		p(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(svg, null);
    				}
    			}

    			if (dirty & /*style*/ 64) {
    				attr(svg, "style", /*style*/ ctx[6]);
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 1024) attrs_action.update.call(null, /*$$props*/ ctx[10]);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    			if_block.d();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    // (77:14) 
    function create_if_block_1$2(ctx) {
    	let svg;
    	let use_1;
    	let events_action;
    	let attrs_action;

    	return {
    		c() {
    			svg = svg_element("svg");
    			use_1 = svg_element("use");
    			this.h();
    		},
    		l(nodes) {
    			svg = claim_element(nodes, "svg", { viewBox: true, style: true, class: true }, 1);
    			var svg_nodes = children(svg);

    			use_1 = claim_element(
    				svg_nodes,
    				"use",
    				{
    					"xlink:href": true,
    					style: true,
    					class: true
    				},
    				1
    			);

    			children(use_1).forEach(detach);
    			svg_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			xlink_attr(use_1, "xlink:href", /*use*/ ctx[2]);
    			attr(use_1, "style", /*aniStyle*/ ctx[7]);
    			attr(use_1, "class", "svelte-1q4wean");
    			toggle_class(use_1, "spinCW", /*spinCW*/ ctx[4]);
    			toggle_class(use_1, "spinCCW", /*spinCCW*/ ctx[5]);
    			attr(svg, "viewBox", "0 0 24 24");
    			attr(svg, "style", /*style*/ ctx[6]);
    			attr(svg, "class", "svelte-1q4wean");
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, use_1);
    			events_action = /*events*/ ctx[8].call(null, svg) || ({});
    			attrs_action = /*attrs*/ ctx[9].call(null, svg, /*$$props*/ ctx[10]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*use*/ 4) {
    				xlink_attr(use_1, "xlink:href", /*use*/ ctx[2]);
    			}

    			if (dirty & /*aniStyle*/ 128) {
    				attr(use_1, "style", /*aniStyle*/ ctx[7]);
    			}

    			if (dirty & /*spinCW*/ 16) {
    				toggle_class(use_1, "spinCW", /*spinCW*/ ctx[4]);
    			}

    			if (dirty & /*spinCCW*/ 32) {
    				toggle_class(use_1, "spinCCW", /*spinCCW*/ ctx[5]);
    			}

    			if (dirty & /*style*/ 64) {
    				attr(svg, "style", /*style*/ ctx[6]);
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 1024) attrs_action.update.call(null, /*$$props*/ ctx[10]);
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    // (73:0) {#if url}
    function create_if_block$2(ctx) {
    	let span;
    	let img;
    	let img_src_value;
    	let events_action;
    	let attrs_action;

    	return {
    		c() {
    			span = element("span");
    			img = element("img");
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { style: true, class: true });
    			var span_nodes = children(span);

    			img = claim_element(span_nodes, "IMG", {
    				src: true,
    				alt: true,
    				width: true,
    				height: true,
    				style: true,
    				class: true
    			});

    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			if (img.src !== (img_src_value = /*url*/ ctx[3])) attr(img, "src", img_src_value);
    			attr(img, "alt", "");
    			attr(img, "width", "100%");
    			attr(img, "height", "100%");
    			attr(img, "style", /*aniStyle*/ ctx[7]);
    			attr(img, "class", "svelte-1q4wean");
    			toggle_class(img, "spinCW", /*spinCW*/ ctx[4]);
    			toggle_class(img, "spinCCW", /*spinCCW*/ ctx[5]);
    			attr(span, "style", /*style*/ ctx[6]);
    			attr(span, "class", "svelte-1q4wean");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			append(span, img);
    			events_action = /*events*/ ctx[8].call(null, span) || ({});
    			attrs_action = /*attrs*/ ctx[9].call(null, span, /*$$props*/ ctx[10]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*url*/ 8 && img.src !== (img_src_value = /*url*/ ctx[3])) {
    				attr(img, "src", img_src_value);
    			}

    			if (dirty & /*aniStyle*/ 128) {
    				attr(img, "style", /*aniStyle*/ ctx[7]);
    			}

    			if (dirty & /*spinCW*/ 16) {
    				toggle_class(img, "spinCW", /*spinCW*/ ctx[4]);
    			}

    			if (dirty & /*spinCCW*/ 32) {
    				toggle_class(img, "spinCCW", /*spinCCW*/ ctx[5]);
    			}

    			if (dirty & /*style*/ 64) {
    				attr(span, "style", /*style*/ ctx[6]);
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 1024) attrs_action.update.call(null, /*$$props*/ ctx[10]);
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    // (87:1) {:else}
    function create_else_block_1(ctx) {
    	let path_1;

    	return {
    		c() {
    			path_1 = svg_element("path");
    			this.h();
    		},
    		l(nodes) {
    			path_1 = claim_element(nodes, "path", { d: true }, 1);
    			children(path_1).forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(path_1, "d", /*path*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, path_1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*path*/ 2) {
    				attr(path_1, "d", /*path*/ ctx[1]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(path_1);
    		}
    	};
    }

    // (83:1) {#if spin !== false}
    function create_if_block_2$1(ctx) {
    	let g;
    	let path_1;

    	return {
    		c() {
    			g = svg_element("g");
    			path_1 = svg_element("path");
    			this.h();
    		},
    		l(nodes) {
    			g = claim_element(nodes, "g", { style: true, class: true }, 1);
    			var g_nodes = children(g);
    			path_1 = claim_element(g_nodes, "path", { d: true }, 1);
    			children(path_1).forEach(detach);
    			g_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(path_1, "d", /*path*/ ctx[1]);
    			attr(g, "style", /*aniStyle*/ ctx[7]);
    			attr(g, "class", "svelte-1q4wean");
    			toggle_class(g, "spinCW", /*spinCW*/ ctx[4]);
    			toggle_class(g, "spinCCW", /*spinCCW*/ ctx[5]);
    		},
    		m(target, anchor) {
    			insert(target, g, anchor);
    			append(g, path_1);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*path*/ 2) {
    				attr(path_1, "d", /*path*/ ctx[1]);
    			}

    			if (dirty & /*aniStyle*/ 128) {
    				attr(g, "style", /*aniStyle*/ ctx[7]);
    			}

    			if (dirty & /*spinCW*/ 16) {
    				toggle_class(g, "spinCW", /*spinCW*/ ctx[4]);
    			}

    			if (dirty & /*spinCCW*/ 32) {
    				toggle_class(g, "spinCCW", /*spinCCW*/ ctx[5]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(g);
    		}
    	};
    }

    function create_fragment$5(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*url*/ ctx[3]) return create_if_block$2;
    		if (/*use*/ ctx[2]) return create_if_block_1$2;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$5($$self, $$props, $$invalidate) {
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let { src = null } = $$props;
    	let { size = 1 } = $$props;
    	let { color = null } = $$props;
    	let { flipH = null } = $$props;
    	let { flipV = null } = $$props;
    	let { rotate = 0 } = $$props;
    	let { spin = false } = $$props;
    	let path = false;
    	let use = false;
    	let url = false;
    	if (Number(size)) $$invalidate(11, size = Number(size));

    	const getStyles = () => {
    		const transform = [];
    		const styles = [];

    		if (size !== null) {
    			const width = typeof size === "string" ? size : `${size * 1.5}rem`;
    			styles.push(["width", width]);
    			styles.push(["height", width]);
    		}

    		styles.push(["fill", color !== null ? color : "currentColor"]);

    		if (flipH) {
    			transform.push("scaleX(-1)");
    		}

    		if (flipV) {
    			transform.push("scaleY(-1)");
    		}

    		if (rotate != 0) {
    			transform.push(`rotate(${rotate}deg)`);
    		}

    		if (transform.length > 0) {
    			styles.push(["transform", transform.join(" ")]);
    			styles.push(["transform-origin", "center"]);
    		}

    		return styles.reduce(
    			(cur, item) => {
    				return `${cur} ${item[0]}:${item[1]};`;
    			},
    			""
    		);
    	};

    	$$self.$set = $$new_props => {
    		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("src" in $$new_props) $$invalidate(12, src = $$new_props.src);
    		if ("size" in $$new_props) $$invalidate(11, size = $$new_props.size);
    		if ("color" in $$new_props) $$invalidate(13, color = $$new_props.color);
    		if ("flipH" in $$new_props) $$invalidate(14, flipH = $$new_props.flipH);
    		if ("flipV" in $$new_props) $$invalidate(15, flipV = $$new_props.flipV);
    		if ("rotate" in $$new_props) $$invalidate(16, rotate = $$new_props.rotate);
    		if ("spin" in $$new_props) $$invalidate(0, spin = $$new_props.spin);
    	};

    	let inverse;
    	let spintime;
    	let spinCW;
    	let spinCCW;
    	let style;
    	let aniStyle;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*src*/ 4096) {
    			 if (!!src && src.toLowerCase().trim().endsWith(".svg")) {
    				$$invalidate(3, url = src);
    				$$invalidate(1, path = $$invalidate(2, use = false));
    			} else if (!!src && src.toLowerCase().trim().includes(".svg#")) {
    				$$invalidate(2, use = src);
    				$$invalidate(3, url = $$invalidate(1, path = false));
    			} else if (!!src) {
    				$$invalidate(1, path = src);
    				$$invalidate(3, url = $$invalidate(2, use = false));
    			}
    		}

    		if ($$self.$$.dirty & /*spin*/ 1) {
    			 $$invalidate(17, inverse = typeof spin !== "boolean" && spin < 0 ? true : false);
    		}

    		if ($$self.$$.dirty & /*spin*/ 1) {
    			 $$invalidate(18, spintime = Math.abs(spin === true ? 2 : spin));
    		}

    		if ($$self.$$.dirty & /*spin, inverse*/ 131073) {
    			 $$invalidate(4, spinCW = !!spin && !inverse);
    		}

    		if ($$self.$$.dirty & /*spin, inverse*/ 131073) {
    			 $$invalidate(5, spinCCW = !!spin && inverse);
    		}

    		if ($$self.$$.dirty & /*size, color, flipH, flipV, rotate*/ 124928) {
    			 $$invalidate(6, style = getStyles());
    		}

    		if ($$self.$$.dirty & /*spin, spintime*/ 262145) {
    			 $$invalidate(7, aniStyle = !!spin ? `animation-duration: ${spintime}s` : undefined);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		spin,
    		path,
    		use,
    		url,
    		spinCW,
    		spinCCW,
    		style,
    		aniStyle,
    		events,
    		attrs,
    		$$props,
    		size,
    		src,
    		color,
    		flipH,
    		flipV,
    		rotate
    	];
    }

    class Icon extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1q4wean-style")) add_css$1();

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			src: 12,
    			size: 11,
    			color: 13,
    			flipH: 14,
    			flipV: 15,
    			rotate: 16,
    			spin: 0
    		});
    	}
    }

    /* cmp/Button.svelte generated by Svelte v3.16.0 */

    function add_css$2() {
    	var style = element("style");
    	style.id = "svelte-1o5ccdl-style";
    	style.textContent = "@keyframes svelte-1o5ccdl-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.loading.svelte-1o5ccdl{color:transparent !important;min-height:.8rem;pointer-events:none;position:relative}.loading.svelte-1o5ccdl::after{animation:svelte-1o5ccdl-loading 500ms infinite linear;border:.2rem solid #FFFFFF;border-radius:50%;border-right-color:transparent;border-top-color:transparent;content:\"\";display:block;height:.8rem;left:50%;margin-left:-.4rem;margin-top:-.4rem;position:absolute;top:50%;width:.8rem;z-index:1}.icon.svelte-1o5ccdl>.lefticon.svelte-1o5ccdl{margin:-10px 10px -10px 0px}.icon.svelte-1o5ccdl>.righticon.svelte-1o5ccdl{margin:-10px 0px -10px 10px}.icon-only.svelte-1o5ccdl{padding:.5rem .65rem}summary.svelte-1o5ccdl,button.svelte-1o5ccdl{white-space:nowrap}summary.svelte-1o5ccdl::-webkit-details-marker{display:none}";
    	append(document.head, style);
    }

    // (88:0) {:else}
    function create_else_block$1(ctx) {
    	let details;
    	let summary;
    	let t0;

    	let t1_value = (/*dropdown*/ ctx[11] !== true
    	? /*dropdown*/ ctx[11]
    	: "") + "";

    	let t1;
    	let t2;
    	let attrs_action;
    	let events_action;
    	let t3;
    	let dropdownAction_action;
    	let current;
    	let dispose;
    	let if_block0 = /*icon*/ ctx[9] && create_if_block_4(ctx);
    	let if_block1 = /*iconRight*/ ctx[10] && create_if_block_3(ctx);

    	const card = new Card({
    			props: {
    				style: "z-index:1",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			}
    		});

    	return {
    		c() {
    			details = element("details");
    			summary = element("summary");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			create_component(card.$$.fragment);
    			this.h();
    		},
    		l(nodes) {
    			details = claim_element(nodes, "DETAILS", { class: true });
    			var details_nodes = children(details);
    			summary = claim_element(details_nodes, "SUMMARY", { class: true });
    			var summary_nodes = children(summary);
    			if (if_block0) if_block0.l(summary_nodes);
    			t0 = claim_space(summary_nodes);
    			t1 = claim_text(summary_nodes, t1_value);
    			t2 = claim_space(summary_nodes);
    			if (if_block1) if_block1.l(summary_nodes);
    			summary_nodes.forEach(detach);
    			t3 = claim_space(details_nodes);
    			claim_component(card.$$.fragment, details_nodes);
    			details_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(summary, "class", "button svelte-1o5ccdl");
    			toggle_class(summary, "outline", /*outline*/ ctx[1]);
    			toggle_class(summary, "primary", /*primary*/ ctx[2]);
    			toggle_class(summary, "secondary", /*secondary*/ ctx[3]);
    			toggle_class(summary, "dark", /*dark*/ ctx[4]);
    			toggle_class(summary, "error", /*error*/ ctx[5]);
    			toggle_class(summary, "success", /*success*/ ctx[6]);
    			toggle_class(summary, "clear", /*clear*/ ctx[7]);
    			toggle_class(summary, "loading", /*loading*/ ctx[8]);
    			toggle_class(summary, "icon", /*clIcon*/ ctx[14]);
    			toggle_class(summary, "icon-only", /*clIcononly*/ ctx[15]);
    			attr(details, "class", "dropdown");
    			dispose = listen(details, "toggle", /*details_toggle_handler*/ ctx[21]);
    		},
    		m(target, anchor) {
    			insert(target, details, anchor);
    			append(details, summary);
    			if (if_block0) if_block0.m(summary, null);
    			append(summary, t0);
    			append(summary, t1);
    			append(summary, t2);
    			if (if_block1) if_block1.m(summary, null);
    			attrs_action = /*attrs*/ ctx[17].call(null, summary, /*$$props*/ ctx[18]) || ({});
    			events_action = /*events*/ ctx[16].call(null, summary) || ({});
    			append(details, t3);
    			mount_component(card, details, null);
    			details.open = /*open*/ ctx[0];
    			dropdownAction_action = dropdownAction.call(null, details, /*autoclose*/ ctx[12]) || ({});
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (/*icon*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(summary, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty & /*dropdown*/ 2048) && t1_value !== (t1_value = (/*dropdown*/ ctx[11] !== true
    			? /*dropdown*/ ctx[11]
    			: "") + "")) set_data(t1, t1_value);

    			if (/*iconRight*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(summary, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 262144) attrs_action.update.call(null, /*$$props*/ ctx[18]);

    			if (dirty & /*outline*/ 2) {
    				toggle_class(summary, "outline", /*outline*/ ctx[1]);
    			}

    			if (dirty & /*primary*/ 4) {
    				toggle_class(summary, "primary", /*primary*/ ctx[2]);
    			}

    			if (dirty & /*secondary*/ 8) {
    				toggle_class(summary, "secondary", /*secondary*/ ctx[3]);
    			}

    			if (dirty & /*dark*/ 16) {
    				toggle_class(summary, "dark", /*dark*/ ctx[4]);
    			}

    			if (dirty & /*error*/ 32) {
    				toggle_class(summary, "error", /*error*/ ctx[5]);
    			}

    			if (dirty & /*success*/ 64) {
    				toggle_class(summary, "success", /*success*/ ctx[6]);
    			}

    			if (dirty & /*clear*/ 128) {
    				toggle_class(summary, "clear", /*clear*/ ctx[7]);
    			}

    			if (dirty & /*loading*/ 256) {
    				toggle_class(summary, "loading", /*loading*/ ctx[8]);
    			}

    			if (dirty & /*clIcon*/ 16384) {
    				toggle_class(summary, "icon", /*clIcon*/ ctx[14]);
    			}

    			if (dirty & /*clIcononly*/ 32768) {
    				toggle_class(summary, "icon-only", /*clIcononly*/ ctx[15]);
    			}

    			const card_changes = {};

    			if (dirty & /*$$scope*/ 4194304) {
    				card_changes.$$scope = { dirty, ctx };
    			}

    			card.$set(card_changes);

    			if (dirty & /*open*/ 1) {
    				details.open = /*open*/ ctx[0];
    			}

    			if (is_function(dropdownAction_action.update) && dirty & /*autoclose*/ 4096) dropdownAction_action.update.call(null, /*autoclose*/ ctx[12]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(card.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(card.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(details);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			destroy_component(card);
    			if (dropdownAction_action && is_function(dropdownAction_action.destroy)) dropdownAction_action.destroy();
    			dispose();
    		}
    	};
    }

    // (65:0) {#if dropdown === false}
    function create_if_block$3(ctx) {
    	let button;
    	let t0;
    	let t1;
    	let button_type_value;
    	let attrs_action;
    	let events_action;
    	let current;
    	let if_block0 = /*icon*/ ctx[9] && create_if_block_2$2(ctx);
    	const default_slot_template = /*$$slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);
    	let if_block1 = /*iconRight*/ ctx[10] && create_if_block_1$3(ctx);

    	return {
    		c() {
    			button = element("button");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			this.h();
    		},
    		l(nodes) {
    			button = claim_element(nodes, "BUTTON", { class: true, type: true });
    			var button_nodes = children(button);
    			if (if_block0) if_block0.l(button_nodes);
    			t0 = claim_space(button_nodes);
    			if (default_slot) default_slot.l(button_nodes);
    			t1 = claim_space(button_nodes);
    			if (if_block1) if_block1.l(button_nodes);
    			button_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(button, "class", "button svelte-1o5ccdl");
    			attr(button, "type", button_type_value = /*submit*/ ctx[13] ? "submit" : null);
    			toggle_class(button, "outline", /*outline*/ ctx[1]);
    			toggle_class(button, "primary", /*primary*/ ctx[2]);
    			toggle_class(button, "secondary", /*secondary*/ ctx[3]);
    			toggle_class(button, "dark", /*dark*/ ctx[4]);
    			toggle_class(button, "error", /*error*/ ctx[5]);
    			toggle_class(button, "success", /*success*/ ctx[6]);
    			toggle_class(button, "clear", /*clear*/ ctx[7]);
    			toggle_class(button, "loading", /*loading*/ ctx[8]);
    			toggle_class(button, "icon", /*clIcon*/ ctx[14]);
    			toggle_class(button, "icon-only", /*clIcononly*/ ctx[15]);
    		},
    		m(target, anchor) {
    			insert(target, button, anchor);
    			if (if_block0) if_block0.m(button, null);
    			append(button, t0);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			append(button, t1);
    			if (if_block1) if_block1.m(button, null);
    			attrs_action = /*attrs*/ ctx[17].call(null, button, /*$$props*/ ctx[18]) || ({});
    			events_action = /*events*/ ctx[16].call(null, button) || ({});
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (/*icon*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    					transition_in(if_block0, 1);
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(button, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4194304) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[22], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null));
    			}

    			if (/*iconRight*/ ctx[10]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    					transition_in(if_block1, 1);
    				} else {
    					if_block1 = create_if_block_1$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(button, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*submit*/ 8192 && button_type_value !== (button_type_value = /*submit*/ ctx[13] ? "submit" : null)) {
    				attr(button, "type", button_type_value);
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 262144) attrs_action.update.call(null, /*$$props*/ ctx[18]);

    			if (dirty & /*outline*/ 2) {
    				toggle_class(button, "outline", /*outline*/ ctx[1]);
    			}

    			if (dirty & /*primary*/ 4) {
    				toggle_class(button, "primary", /*primary*/ ctx[2]);
    			}

    			if (dirty & /*secondary*/ 8) {
    				toggle_class(button, "secondary", /*secondary*/ ctx[3]);
    			}

    			if (dirty & /*dark*/ 16) {
    				toggle_class(button, "dark", /*dark*/ ctx[4]);
    			}

    			if (dirty & /*error*/ 32) {
    				toggle_class(button, "error", /*error*/ ctx[5]);
    			}

    			if (dirty & /*success*/ 64) {
    				toggle_class(button, "success", /*success*/ ctx[6]);
    			}

    			if (dirty & /*clear*/ 128) {
    				toggle_class(button, "clear", /*clear*/ ctx[7]);
    			}

    			if (dirty & /*loading*/ 256) {
    				toggle_class(button, "loading", /*loading*/ ctx[8]);
    			}

    			if (dirty & /*clIcon*/ 16384) {
    				toggle_class(button, "icon", /*clIcon*/ ctx[14]);
    			}

    			if (dirty & /*clIcononly*/ 32768) {
    				toggle_class(button, "icon-only", /*clIcononly*/ ctx[15]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(button);
    			if (if_block0) if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block1) if_block1.d();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    		}
    	};
    }

    // (107:4) {#if icon}
    function create_if_block_4(ctx) {
    	let span;
    	let current;

    	const icon_1 = new Icon({
    			props: { src: /*icon*/ ctx[9], size: "24px" }
    		});

    	return {
    		c() {
    			span = element("span");
    			create_component(icon_1.$$.fragment);
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			claim_component(icon_1.$$.fragment, span_nodes);
    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(span, "class", "lefticon svelte-1o5ccdl");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			mount_component(icon_1, span, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 512) icon_1_changes.src = /*icon*/ ctx[9];
    			icon_1.$set(icon_1_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			destroy_component(icon_1);
    		}
    	};
    }

    // (109:4) {#if iconRight}
    function create_if_block_3(ctx) {
    	let span;
    	let current;

    	const icon_1 = new Icon({
    			props: { src: /*iconRight*/ ctx[10], size: "24px" }
    		});

    	return {
    		c() {
    			span = element("span");
    			create_component(icon_1.$$.fragment);
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			claim_component(icon_1.$$.fragment, span_nodes);
    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(span, "class", "righticon svelte-1o5ccdl");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			mount_component(icon_1, span, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*iconRight*/ 1024) icon_1_changes.src = /*iconRight*/ ctx[10];
    			icon_1.$set(icon_1_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			destroy_component(icon_1);
    		}
    	};
    }

    // (111:4) <Card style="z-index:1">
    function create_default_slot(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[20].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		l(nodes) {
    			if (default_slot) default_slot.l(nodes);
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 4194304) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[22], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    // (84:0) {#if icon}
    function create_if_block_2$2(ctx) {
    	let span;
    	let current;

    	const icon_1 = new Icon({
    			props: { src: /*icon*/ ctx[9], size: "24px" }
    		});

    	return {
    		c() {
    			span = element("span");
    			create_component(icon_1.$$.fragment);
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			claim_component(icon_1.$$.fragment, span_nodes);
    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(span, "class", "lefticon svelte-1o5ccdl");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			mount_component(icon_1, span, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 512) icon_1_changes.src = /*icon*/ ctx[9];
    			icon_1.$set(icon_1_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			destroy_component(icon_1);
    		}
    	};
    }

    // (86:0) {#if iconRight}
    function create_if_block_1$3(ctx) {
    	let span;
    	let current;

    	const icon_1 = new Icon({
    			props: { src: /*iconRight*/ ctx[10], size: "24px" }
    		});

    	return {
    		c() {
    			span = element("span");
    			create_component(icon_1.$$.fragment);
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			claim_component(icon_1.$$.fragment, span_nodes);
    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(span, "class", "righticon svelte-1o5ccdl");
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);
    			mount_component(icon_1, span, null);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*iconRight*/ 1024) icon_1_changes.src = /*iconRight*/ ctx[10];
    			icon_1.$set(icon_1_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			destroy_component(icon_1);
    		}
    	};
    }

    function create_fragment$6(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$3, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*dropdown*/ ctx[11] === false) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function dropdownAction(node, param) {
    	let autoclose = param;
    	let button = node.getElementsByTagName("summary")[0];

    	const clickOutside = () => {
    		if (!!node.open) node.open = false;
    	};

    	const clickButton = e => {
    		e.stopPropagation();
    	};

    	const clickInDD = e => {
    		e.stopPropagation();
    		if (autoclose) node.open = false;
    	};

    	node.addEventListener("click", clickInDD);
    	button.addEventListener("click", clickButton);
    	window.addEventListener("click", clickOutside);

    	return {
    		update: param => autoclose = param,
    		destroy: () => {
    			window.removeEventListener("click", clickOutside);
    			node.removeEventListener("click", clickInDD);
    			button.removeEventListener("click", clickButton);
    		}
    	};
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { outline = null } = $$props;
    	let { primary = null } = $$props;
    	let { secondary = null } = $$props;
    	let { dark = null } = $$props;
    	let { error = null } = $$props;
    	let { success = null } = $$props;
    	let { clear = null } = $$props;
    	let { loading = null } = $$props;
    	let { icon = null } = $$props;
    	let { iconRight = null } = $$props;
    	let { dropdown = false } = $$props;
    	let { open = false } = $$props;
    	let { autoclose = false } = $$props;
    	let { submit = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	const hasSlot = $$props.$$slots !== undefined;
    	let { $$slots = {}, $$scope } = $$props;

    	function details_toggle_handler() {
    		open = this.open;
    		$$invalidate(0, open);
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("outline" in $$new_props) $$invalidate(1, outline = $$new_props.outline);
    		if ("primary" in $$new_props) $$invalidate(2, primary = $$new_props.primary);
    		if ("secondary" in $$new_props) $$invalidate(3, secondary = $$new_props.secondary);
    		if ("dark" in $$new_props) $$invalidate(4, dark = $$new_props.dark);
    		if ("error" in $$new_props) $$invalidate(5, error = $$new_props.error);
    		if ("success" in $$new_props) $$invalidate(6, success = $$new_props.success);
    		if ("clear" in $$new_props) $$invalidate(7, clear = $$new_props.clear);
    		if ("loading" in $$new_props) $$invalidate(8, loading = $$new_props.loading);
    		if ("icon" in $$new_props) $$invalidate(9, icon = $$new_props.icon);
    		if ("iconRight" in $$new_props) $$invalidate(10, iconRight = $$new_props.iconRight);
    		if ("dropdown" in $$new_props) $$invalidate(11, dropdown = $$new_props.dropdown);
    		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ("autoclose" in $$new_props) $$invalidate(12, autoclose = $$new_props.autoclose);
    		if ("submit" in $$new_props) $$invalidate(13, submit = $$new_props.submit);
    		if ("$$scope" in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
    	};

    	let clIcon;
    	let clIcononly;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*icon, iconRight*/ 1536) {
    			 $$invalidate(14, clIcon = (icon !== null || iconRight !== null) && hasSlot);
    		}

    		if ($$self.$$.dirty & /*dropdown, icon*/ 2560) {
    			 $$invalidate(15, clIcononly = dropdown
    			? icon !== null && dropdown === true
    			: icon !== null && !hasSlot);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		open,
    		outline,
    		primary,
    		secondary,
    		dark,
    		error,
    		success,
    		clear,
    		loading,
    		icon,
    		iconRight,
    		dropdown,
    		autoclose,
    		submit,
    		clIcon,
    		clIcononly,
    		events,
    		attrs,
    		$$props,
    		hasSlot,
    		$$slots,
    		details_toggle_handler,
    		$$scope
    	];
    }

    class Button extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1o5ccdl-style")) add_css$2();

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			outline: 1,
    			primary: 2,
    			secondary: 3,
    			dark: 4,
    			error: 5,
    			success: 6,
    			clear: 7,
    			loading: 8,
    			icon: 9,
    			iconRight: 10,
    			dropdown: 11,
    			open: 0,
    			autoclose: 12,
    			submit: 13
    		});
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /* cmp/Tabs.svelte generated by Svelte v3.16.0 */

    function create_fragment$7(ctx) {
    	let nav;
    	let events_action;
    	let attrs_action;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	return {
    		c() {
    			nav = element("nav");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			nav = claim_element(nodes, "NAV", { class: true });
    			var nav_nodes = children(nav);
    			if (default_slot) default_slot.l(nav_nodes);
    			nav_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(nav, "class", "tabs");
    			toggle_class(nav, "is-full", /*full*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, nav, anchor);

    			if (default_slot) {
    				default_slot.m(nav, null);
    			}

    			events_action = /*events*/ ctx[1].call(null, nav) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, nav, /*$$props*/ ctx[4]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 256) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 16) attrs_action.update.call(null, /*$$props*/ ctx[4]);

    			if (dirty & /*full*/ 1) {
    				toggle_class(nav, "is-full", /*full*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(nav);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $active_tab;
    	let { active = 0 } = $$props;
    	let { full = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	const active_tab = writable(active);
    	component_subscribe($$self, active_tab, value => $$invalidate(7, $active_tab = value));
    	let num = 0;
    	setContext("tabs:getid", () => num++);
    	setContext("tabs:active", active_tab);
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("active" in $$new_props) $$invalidate(5, active = $$new_props.active);
    		if ("full" in $$new_props) $$invalidate(0, full = $$new_props.full);
    		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$active_tab*/ 128) {
    			 $$invalidate(5, active = $active_tab);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		full,
    		events,
    		attrs,
    		active_tab,
    		$$props,
    		active,
    		num,
    		$active_tab,
    		$$scope,
    		$$slots
    	];
    }

    class Tabs extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { active: 5, full: 0 });
    	}
    }

    /* cmp/Tab.svelte generated by Svelte v3.16.0 */

    function create_fragment$8(ctx) {
    	let a;
    	let events_action;
    	let attrs_action;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	return {
    		c() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			a = claim_element(nodes, "A", { href: true });
    			var a_nodes = children(a);
    			if (default_slot) default_slot.l(a_nodes);
    			a_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(a, "href", "/");
    			toggle_class(a, "active", /*active*/ ctx[1]);
    			dispose = listen(a, "click", prevent_default(/*click_handler*/ ctx[10]));
    		},
    		m(target, anchor) {
    			insert(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			events_action = /*events*/ ctx[2].call(null, a) || ({});
    			attrs_action = /*attrs*/ ctx[3].call(null, a, /*$$props*/ ctx[6]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 256) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 64) attrs_action.update.call(null, /*$$props*/ ctx[6]);

    			if (dirty & /*active*/ 2) {
    				toggle_class(a, "active", /*active*/ ctx[1]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(a);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $active_tab;
    	let { tabid = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	const active_tab = getContext("tabs:active");
    	component_subscribe($$self, active_tab, value => $$invalidate(7, $active_tab = value));
    	const id = getContext("tabs:getid")();
    	let { $$slots = {}, $$scope } = $$props;
    	const click_handler = () => active_tab.set(tabid === false ? id : tabid);

    	$$self.$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("tabid" in $$new_props) $$invalidate(0, tabid = $$new_props.tabid);
    		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	let active;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$active_tab, tabid*/ 129) {
    			 $$invalidate(1, active = $active_tab === tabid || $active_tab === id);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		tabid,
    		active,
    		events,
    		attrs,
    		active_tab,
    		id,
    		$$props,
    		$active_tab,
    		$$scope,
    		$$slots,
    		click_handler
    	];
    }

    class Tab extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { tabid: 0 });
    	}
    }

    /* cmp/Tag.svelte generated by Svelte v3.16.0 */

    function create_fragment$9(ctx) {
    	let span;
    	let events_action;
    	let attrs_action;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	return {
    		c() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			if (default_slot) default_slot.l(span_nodes);
    			span_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(span, "class", "tag");
    			toggle_class(span, "is-small", /*small*/ ctx[0]);
    			toggle_class(span, "is-large", /*large*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			events_action = /*events*/ ctx[2].call(null, span) || ({});
    			attrs_action = /*attrs*/ ctx[3].call(null, span, /*$$props*/ ctx[4]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 32) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 16) attrs_action.update.call(null, /*$$props*/ ctx[4]);

    			if (dirty & /*small*/ 1) {
    				toggle_class(span, "is-small", /*small*/ ctx[0]);
    			}

    			if (dirty & /*large*/ 2) {
    				toggle_class(span, "is-large", /*large*/ ctx[1]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(span);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { small = false } = $$props;
    	let { large = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("small" in $$new_props) $$invalidate(0, small = $$new_props.small);
    		if ("large" in $$new_props) $$invalidate(1, large = $$new_props.large);
    		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);
    	return [small, large, events, attrs, $$props, $$scope, $$slots];
    }

    class Tag extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { small: 0, large: 1 });
    	}
    }

    /* cmp/Details.svelte generated by Svelte v3.16.0 */

    function add_css$3() {
    	var style = element("style");
    	style.id = "svelte-4ixea4-style";
    	style.textContent = "summary.svelte-4ixea4{cursor:pointer}";
    	append(document.head, style);
    }

    const get_summary_slot_changes = dirty => ({});
    const get_summary_slot_context = ctx => ({});

    function create_fragment$a(ctx) {
    	let details;
    	let summary;
    	let t;
    	let events_action;
    	let attrs_action;
    	let current;
    	let dispose;
    	const summary_slot_template = /*$$slots*/ ctx[6].summary;
    	const summary_slot = create_slot(summary_slot_template, ctx, /*$$scope*/ ctx[5], get_summary_slot_context);
    	const default_slot_template = /*$$slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	return {
    		c() {
    			details = element("details");
    			summary = element("summary");
    			if (summary_slot) summary_slot.c();
    			t = space();
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			details = claim_element(nodes, "DETAILS", {});
    			var details_nodes = children(details);
    			summary = claim_element(details_nodes, "SUMMARY", { class: true });
    			var summary_nodes = children(summary);
    			if (summary_slot) summary_slot.l(summary_nodes);
    			summary_nodes.forEach(detach);
    			t = claim_space(details_nodes);
    			if (default_slot) default_slot.l(details_nodes);
    			details_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(summary, "class", "svelte-4ixea4");
    			toggle_class(details, "dropdown", /*dropdown*/ ctx[1]);
    			dispose = listen(details, "toggle", /*details_toggle_handler*/ ctx[7]);
    		},
    		m(target, anchor) {
    			insert(target, details, anchor);
    			append(details, summary);

    			if (summary_slot) {
    				summary_slot.m(summary, null);
    			}

    			append(details, t);

    			if (default_slot) {
    				default_slot.m(details, null);
    			}

    			details.open = /*open*/ ctx[0];
    			events_action = /*events*/ ctx[2].call(null, details) || ({});
    			attrs_action = /*attrs*/ ctx[3].call(null, details, /*$$props*/ ctx[4]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (summary_slot && summary_slot.p && dirty & /*$$scope*/ 32) {
    				summary_slot.p(get_slot_context(summary_slot_template, ctx, /*$$scope*/ ctx[5], get_summary_slot_context), get_slot_changes(summary_slot_template, /*$$scope*/ ctx[5], dirty, get_summary_slot_changes));
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 32) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[5], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null));
    			}

    			if (dirty & /*open*/ 1) {
    				details.open = /*open*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 16) attrs_action.update.call(null, /*$$props*/ ctx[4]);

    			if (dirty & /*dropdown*/ 2) {
    				toggle_class(details, "dropdown", /*dropdown*/ ctx[1]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(summary_slot, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(summary_slot, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(details);
    			if (summary_slot) summary_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { dropdown = false } = $$props;
    	let { open = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let { $$slots = {}, $$scope } = $$props;

    	function details_toggle_handler() {
    		open = this.open;
    		$$invalidate(0, open);
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("dropdown" in $$new_props) $$invalidate(1, dropdown = $$new_props.dropdown);
    		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		open,
    		dropdown,
    		events,
    		attrs,
    		$$props,
    		$$scope,
    		$$slots,
    		details_toggle_handler
    	];
    }

    class Details extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-4ixea4-style")) add_css$3();
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { dropdown: 1, open: 0 });
    	}
    }

    /* cmp/Input.svelte generated by Svelte v3.16.0 */

    function add_css$4() {
    	var style = element("style");
    	style.id = "svelte-ovucoa-style";
    	style.textContent = "input[type=range].svelte-ovucoa::-moz-range-track,input[type=range].svelte-ovucoa::-webkit-slider-runnable-track{background-color:var(--color-primary)}";
    	append(document.head, style);
    }

    // (62:0) {:else}
    function create_else_block$2(ctx) {
    	let input;
    	let events_action;
    	let attrs_action;
    	let dispose;

    	return {
    		c() {
    			input = element("input");
    			this.h();
    		},
    		l(nodes) {
    			input = claim_element(nodes, "INPUT", { type: true, value: true, class: true });
    			this.h();
    		},
    		h() {
    			attr(input, "type", /*type*/ ctx[1]);
    			input.value = /*value*/ ctx[0];
    			attr(input, "class", "svelte-ovucoa");
    			toggle_class(input, "error", /*error*/ ctx[2]);
    			toggle_class(input, "success", /*success*/ ctx[3]);
    			dispose = listen(input, "input", /*onInput*/ ctx[6]);
    		},
    		m(target, anchor) {
    			insert(target, input, anchor);
    			events_action = /*events*/ ctx[4].call(null, input) || ({});
    			attrs_action = /*attrs*/ ctx[5].call(null, input, /*$$props*/ ctx[7]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*type*/ 2) {
    				attr(input, "type", /*type*/ ctx[1]);
    			}

    			if (dirty & /*value*/ 1) {
    				input.value = /*value*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 128) attrs_action.update.call(null, /*$$props*/ ctx[7]);

    			if (dirty & /*error*/ 4) {
    				toggle_class(input, "error", /*error*/ ctx[2]);
    			}

    			if (dirty & /*success*/ 8) {
    				toggle_class(input, "success", /*success*/ ctx[3]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(input);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    // (54:0) {#if type === 'textarea'}
    function create_if_block$4(ctx) {
    	let textarea_1;
    	let events_action;
    	let attrs_action;
    	let dispose;

    	return {
    		c() {
    			textarea_1 = element("textarea");
    			this.h();
    		},
    		l(nodes) {
    			textarea_1 = claim_element(nodes, "TEXTAREA", { value: true });
    			children(textarea_1).forEach(detach);
    			this.h();
    		},
    		h() {
    			textarea_1.value = /*value*/ ctx[0];
    			toggle_class(textarea_1, "error", /*error*/ ctx[2]);
    			toggle_class(textarea_1, "success", /*success*/ ctx[3]);
    			dispose = listen(textarea_1, "input", /*onInput*/ ctx[6]);
    		},
    		m(target, anchor) {
    			insert(target, textarea_1, anchor);
    			events_action = /*events*/ ctx[4].call(null, textarea_1) || ({});
    			attrs_action = /*attrs*/ ctx[5].call(null, textarea_1, /*$$props*/ ctx[7]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*value*/ 1) {
    				textarea_1.value = /*value*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 128) attrs_action.update.call(null, /*$$props*/ ctx[7]);

    			if (dirty & /*error*/ 4) {
    				toggle_class(textarea_1, "error", /*error*/ ctx[2]);
    			}

    			if (dirty & /*success*/ 8) {
    				toggle_class(textarea_1, "success", /*success*/ ctx[3]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(textarea_1);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*type*/ ctx[1] === "textarea") return create_if_block$4;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    		},
    		p(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { value = "" } = $$props;
    	let { type = "text" } = $$props;
    	let { error = null } = $$props;
    	let { success = null } = $$props;
    	let { password = false } = $$props;
    	let { number = false } = $$props;
    	let { textarea = false } = $$props;
    	let { color = false } = $$props;
    	let { date = false } = $$props;
    	let { range = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);

    	const onInput = e => {
    		const type = e.target.type;
    		const val = e.target.value;
    		if (type === "number" || type === "range") $$invalidate(0, value = val === "" ? undefined : +val); else $$invalidate(0, value = val);
    	};

    	let getState = getContext("field:state");
    	let state_unsubscribe = false;

    	if (getState) {
    		state_unsubscribe = getState.subscribe(state => {
    			if (state === "error") $$invalidate(2, error = true); else if (state === "success") $$invalidate(3, success = true); else $$invalidate(3, success = $$invalidate(2, error = false));
    		});
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ("type" in $$new_props) $$invalidate(1, type = $$new_props.type);
    		if ("error" in $$new_props) $$invalidate(2, error = $$new_props.error);
    		if ("success" in $$new_props) $$invalidate(3, success = $$new_props.success);
    		if ("password" in $$new_props) $$invalidate(8, password = $$new_props.password);
    		if ("number" in $$new_props) $$invalidate(9, number = $$new_props.number);
    		if ("textarea" in $$new_props) $$invalidate(10, textarea = $$new_props.textarea);
    		if ("color" in $$new_props) $$invalidate(11, color = $$new_props.color);
    		if ("date" in $$new_props) $$invalidate(12, date = $$new_props.date);
    		if ("range" in $$new_props) $$invalidate(13, range = $$new_props.range);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*password*/ 256) {
    			 if (password) $$invalidate(1, type = "password");
    		}

    		if ($$self.$$.dirty & /*number*/ 512) {
    			 if (number) $$invalidate(1, type = "number");
    		}

    		if ($$self.$$.dirty & /*textarea*/ 1024) {
    			 if (textarea) $$invalidate(1, type = "textarea");
    		}

    		if ($$self.$$.dirty & /*color*/ 2048) {
    			 if (color) $$invalidate(1, type = "color");
    		}

    		if ($$self.$$.dirty & /*date*/ 4096) {
    			 if (date) $$invalidate(1, type = "date");
    		}

    		if ($$self.$$.dirty & /*range*/ 8192) {
    			 if (range) $$invalidate(1, type = "range");
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		value,
    		type,
    		error,
    		success,
    		events,
    		attrs,
    		onInput,
    		$$props,
    		password,
    		number,
    		textarea,
    		color,
    		date,
    		range
    	];
    }

    class Input extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-ovucoa-style")) add_css$4();

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			value: 0,
    			type: 1,
    			error: 2,
    			success: 3,
    			password: 8,
    			number: 9,
    			textarea: 10,
    			color: 11,
    			date: 12,
    			range: 13
    		});
    	}
    }

    /* cmp/Field.svelte generated by Svelte v3.16.0 */

    function add_css$5() {
    	var style = element("style");
    	style.id = "svelte-3n5xjn-style";
    	style.textContent = "p.svelte-3n5xjn{margin:0px;padding:0px}.message.svelte-3n5xjn{font-size:smaller}.grouped.svelte-3n5xjn:not(.gapless){overflow-x:auto}";
    	append(document.head, style);
    }

    // (38:1) {#if label}
    function create_if_block_1$4(ctx) {
    	let label_1;
    	let t;

    	return {
    		c() {
    			label_1 = element("label");
    			t = text(/*label*/ ctx[1]);
    		},
    		l(nodes) {
    			label_1 = claim_element(nodes, "LABEL", {});
    			var label_1_nodes = children(label_1);
    			t = claim_text(label_1_nodes, /*label*/ ctx[1]);
    			label_1_nodes.forEach(detach);
    		},
    		m(target, anchor) {
    			insert(target, label_1, anchor);
    			append(label_1, t);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);
    		},
    		d(detaching) {
    			if (detaching) detach(label_1);
    		}
    	};
    }

    // (44:1) {:else}
    function create_else_block$3(ctx) {
    	let p;
    	let t;

    	return {
    		c() {
    			p = element("p");
    			t = text(" ");
    			this.h();
    		},
    		l(nodes) {
    			p = claim_element(nodes, "P", { class: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, " ");
    			p_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(p, "class", "message svelte-3n5xjn");
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    			append(p, t);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    // (42:1) {#if message}
    function create_if_block$5(ctx) {
    	let p;
    	let t;

    	return {
    		c() {
    			p = element("p");
    			t = text(/*message*/ ctx[5]);
    			this.h();
    		},
    		l(nodes) {
    			p = claim_element(nodes, "P", { class: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, /*message*/ ctx[5]);
    			p_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(p, "class", "message svelte-3n5xjn");
    			toggle_class(p, "text-error", /*error*/ ctx[2]);
    			toggle_class(p, "text-success", /*success*/ ctx[3]);
    		},
    		m(target, anchor) {
    			insert(target, p, anchor);
    			append(p, t);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*message*/ 32) set_data(t, /*message*/ ctx[5]);

    			if (dirty & /*error*/ 4) {
    				toggle_class(p, "text-error", /*error*/ ctx[2]);
    			}

    			if (dirty & /*success*/ 8) {
    				toggle_class(p, "text-success", /*success*/ ctx[3]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(p);
    		}
    	};
    }

    function create_fragment$c(ctx) {
    	let div;
    	let t0;
    	let p;
    	let t1;
    	let events_action;
    	let attrs_action;
    	let current;
    	let if_block0 = /*label*/ ctx[1] && create_if_block_1$4(ctx);
    	const default_slot_template = /*$$slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	function select_block_type(ctx, dirty) {
    		if (/*message*/ ctx[5]) return create_if_block$5;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			p = element("p");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			if_block1.c();
    			this.h();
    		},
    		l(nodes) {
    			div = claim_element(nodes, "DIV", {});
    			var div_nodes = children(div);
    			if (if_block0) if_block0.l(div_nodes);
    			t0 = claim_space(div_nodes);
    			p = claim_element(div_nodes, "P", { class: true });
    			var p_nodes = children(p);
    			if (default_slot) default_slot.l(p_nodes);
    			p_nodes.forEach(detach);
    			t1 = claim_space(div_nodes);
    			if_block1.l(div_nodes);
    			div_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(p, "class", "svelte-3n5xjn");
    			toggle_class(p, "grouped", /*grouped*/ ctx[0]);
    			toggle_class(p, "gapless", /*gapless*/ ctx[4]);
    			toggle_class(div, "nomessage", !/*message*/ ctx[5]);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append(div, t0);
    			append(div, p);

    			if (default_slot) {
    				default_slot.m(p, null);
    			}

    			append(div, t1);
    			if_block1.m(div, null);
    			events_action = /*events*/ ctx[6].call(null, div) || ({});
    			attrs_action = /*attrs*/ ctx[7].call(null, div, /*$$props*/ ctx[8]) || ({});
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*label*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$4(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 1024) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[10], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null));
    			}

    			if (dirty & /*grouped*/ 1) {
    				toggle_class(p, "grouped", /*grouped*/ ctx[0]);
    			}

    			if (dirty & /*gapless*/ 16) {
    				toggle_class(p, "gapless", /*gapless*/ ctx[4]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 256) attrs_action.update.call(null, /*$$props*/ ctx[8]);

    			if (dirty & /*message*/ 32) {
    				toggle_class(div, "nomessage", !/*message*/ ctx[5]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (if_block0) if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			if_block1.d();
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    		}
    	};
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { label = false } = $$props;
    	let { error = false } = $$props;
    	let { success = false } = $$props;
    	let { grouped = false } = $$props;
    	let { gapless = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	const state = writable("");
    	let message = false;
    	setContext("field:state", state);
    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("label" in $$new_props) $$invalidate(1, label = $$new_props.label);
    		if ("error" in $$new_props) $$invalidate(2, error = $$new_props.error);
    		if ("success" in $$new_props) $$invalidate(3, success = $$new_props.success);
    		if ("grouped" in $$new_props) $$invalidate(0, grouped = $$new_props.grouped);
    		if ("gapless" in $$new_props) $$invalidate(4, gapless = $$new_props.gapless);
    		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*gapless*/ 16) {
    			 if (gapless) $$invalidate(0, grouped = true);
    		}

    		if ($$self.$$.dirty & /*error, success*/ 12) {
    			 if (typeof error === "string") {
    				state.set("error");
    				$$invalidate(5, message = error);
    			} else if (typeof success === "string") {
    				state.set("success");
    				$$invalidate(5, message = success);
    			} else {
    				state.set("");
    				$$invalidate(5, message = false);
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		grouped,
    		label,
    		error,
    		success,
    		gapless,
    		message,
    		events,
    		attrs,
    		$$props,
    		state,
    		$$scope,
    		$$slots
    	];
    }

    class Field extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-3n5xjn-style")) add_css$5();

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			label: 1,
    			error: 2,
    			success: 3,
    			grouped: 0,
    			gapless: 4
    		});
    	}
    }

    /* cmp/Radio.svelte generated by Svelte v3.16.0 */

    function create_else_block$4(ctx) {
    	let input;
    	let events_action;
    	let attrs_action;
    	let dispose;

    	return {
    		c() {
    			input = element("input");
    			this.h();
    		},
    		l(nodes) {
    			input = claim_element(nodes, "INPUT", { type: true, checked: true });
    			this.h();
    		},
    		h() {
    			attr(input, "type", "radio");
    			input.checked = /*checked*/ ctx[0];
    			dispose = listen(input, "change", /*handleChange*/ ctx[4]);
    		},
    		m(target, anchor) {
    			insert(target, input, anchor);
    			events_action = /*events*/ ctx[1].call(null, input) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, input, /*$$props*/ ctx[5]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 32) attrs_action.update.call(null, /*$$props*/ ctx[5]);
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(input);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    // (22:0) {#if labeled}
    function create_if_block$6(ctx) {
    	let label;
    	let input;
    	let events_action;
    	let t;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	return {
    		c() {
    			label = element("label");
    			input = element("input");
    			t = space();
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			label = claim_element(nodes, "LABEL", {});
    			var label_nodes = children(label);
    			input = claim_element(label_nodes, "INPUT", { type: true, checked: true });
    			t = claim_space(label_nodes);
    			if (default_slot) default_slot.l(label_nodes);
    			label_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(input, "type", "radio");
    			input.checked = /*checked*/ ctx[0];
    			dispose = listen(input, "change", /*handleChange*/ ctx[4]);
    		},
    		m(target, anchor) {
    			insert(target, label, anchor);
    			append(label, input);
    			events_action = /*events*/ ctx[1].call(null, input) || ({});
    			append(label, t);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (!current || dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 256) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(label);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};
    }

    function create_fragment$d(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$6, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*labeled*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { value = "" } = $$props;
    	let { group = "" } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let checked = false;
    	let labeled = $$props.hasOwnProperty("$$slots");

    	function handleChange() {
    		$$invalidate(6, group = value);
    	}

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("value" in $$new_props) $$invalidate(7, value = $$new_props.value);
    		if ("group" in $$new_props) $$invalidate(6, group = $$new_props.group);
    		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*group, value*/ 192) {
    			 $$invalidate(0, checked = group === value);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		checked,
    		events,
    		attrs,
    		labeled,
    		handleChange,
    		$$props,
    		group,
    		value,
    		$$scope,
    		$$slots
    	];
    }

    class Radio extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { value: 7, group: 6 });
    	}
    }

    /* cmp/Checkbox.svelte generated by Svelte v3.16.0 */

    function create_else_block$5(ctx) {
    	let input;
    	let events_action;
    	let attrs_action;
    	let dispose;

    	return {
    		c() {
    			input = element("input");
    			this.h();
    		},
    		l(nodes) {
    			input = claim_element(nodes, "INPUT", { type: true, checked: true });
    			this.h();
    		},
    		h() {
    			attr(input, "type", "checkbox");
    			input.checked = /*checked*/ ctx[0];
    			dispose = listen(input, "change", /*change_handler_1*/ ctx[11]);
    		},
    		m(target, anchor) {
    			insert(target, input, anchor);
    			events_action = /*events*/ ctx[1].call(null, input) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, input, /*$$props*/ ctx[5]) || ({});
    		},
    		p(ctx, dirty) {
    			if (dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 32) attrs_action.update.call(null, /*$$props*/ ctx[5]);
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(input);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			dispose();
    		}
    	};
    }

    // (37:0) {#if labeled}
    function create_if_block$7(ctx) {
    	let label;
    	let input;
    	let events_action;
    	let attrs_action;
    	let t;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	return {
    		c() {
    			label = element("label");
    			input = element("input");
    			t = space();
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			label = claim_element(nodes, "LABEL", {});
    			var label_nodes = children(label);
    			input = claim_element(label_nodes, "INPUT", { type: true, checked: true });
    			t = claim_space(label_nodes);
    			if (default_slot) default_slot.l(label_nodes);
    			label_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(input, "type", "checkbox");
    			input.checked = /*checked*/ ctx[0];
    			dispose = listen(input, "change", /*change_handler*/ ctx[10]);
    		},
    		m(target, anchor) {
    			insert(target, label, anchor);
    			append(label, input);
    			events_action = /*events*/ ctx[1].call(null, input) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, input, /*$$props*/ ctx[5]) || ({});
    			append(label, t);

    			if (default_slot) {
    				default_slot.m(label, null);
    			}

    			current = true;
    		},
    		p(ctx, dirty) {
    			if (!current || dirty & /*checked*/ 1) {
    				input.checked = /*checked*/ ctx[0];
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 32) attrs_action.update.call(null, /*$$props*/ ctx[5]);

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 256) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[8], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null));
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(label);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};
    }

    function create_fragment$e(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$7, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*labeled*/ ctx[3]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	return {
    		c() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { value = "" } = $$props;
    	let { group = [] } = $$props;
    	let { checked = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let labeled = $$props.hasOwnProperty("$$slots");

    	function handleChange(on) {
    		if (!isArray(group)) $$invalidate(6, group = []);
    		const idx = group.indexOf(value);

    		if (on && idx === -1) {
    			group.push(value);
    			$$invalidate(6, group);
    		} else if (!on && idx !== -1) {
    			group.splice(idx, 1);
    			$$invalidate(6, group);
    		}
    	}

    	if (checked) handleChange(checked);
    	let { $$slots = {}, $$scope } = $$props;
    	const change_handler = e => handleChange(e.srcElement.checked);
    	const change_handler_1 = e => handleChange(e.srcElement.checked);

    	$$self.$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("value" in $$new_props) $$invalidate(7, value = $$new_props.value);
    		if ("group" in $$new_props) $$invalidate(6, group = $$new_props.group);
    		if ("checked" in $$new_props) $$invalidate(0, checked = $$new_props.checked);
    		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*group, value*/ 192) {
    			 if (isArray(group)) {
    				$$invalidate(0, checked = group.indexOf(value) !== -1);
    			} else $$invalidate(0, checked = false);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		checked,
    		events,
    		attrs,
    		labeled,
    		handleChange,
    		$$props,
    		group,
    		value,
    		$$scope,
    		$$slots,
    		change_handler,
    		change_handler_1
    	];
    }

    class Checkbox extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { value: 7, group: 6, checked: 0 });
    	}
    }

    function fade(node, { delay = 0, duration = 400, easing = identity }) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /* cmp/Modal.svelte generated by Svelte v3.16.0 */

    function add_css$6() {
    	var style = element("style");
    	style.id = "svelte-4lwi8h-style";
    	style.textContent = ".container.svelte-4lwi8h{position:fixed;top:0px;left:0px;width:100vw;height:100vh;z-index:10000}.background.svelte-4lwi8h{position:fixed;top:0px;left:0px;width:100vw;height:100vh;background-color:black;opacity:0.5}.modal.svelte-4lwi8h{position:fixed;top:50%;left:50%;transform:translate(-50%, -50%);min-width:400px;background-color:white}";
    	append(document.head, style);
    }

    // (16:0) {#if open}
    function create_if_block$8(ctx) {
    	let div2;
    	let div0;
    	let t;
    	let div1;
    	let events_action;
    	let attrs_action;
    	let div2_transition;
    	let current;
    	let dispose;
    	const default_slot_template = /*$$slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	return {
    		c() {
    			div2 = element("div");
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			this.h();
    		},
    		l(nodes) {
    			div2 = claim_element(nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			div0 = claim_element(div2_nodes, "DIV", { class: true });
    			children(div0).forEach(detach);
    			t = claim_space(div2_nodes);
    			div1 = claim_element(div2_nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			if (default_slot) default_slot.l(div1_nodes);
    			div1_nodes.forEach(detach);
    			div2_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(div0, "class", "background svelte-4lwi8h");
    			attr(div1, "class", "modal svelte-4lwi8h");
    			attr(div2, "class", "container svelte-4lwi8h");

    			dispose = listen(div0, "click", function () {
    				/*click_handler*/ ctx[8].apply(this, arguments);
    			});
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div0);
    			append(div2, t);
    			append(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			events_action = /*events*/ ctx[1].call(null, div1) || ({});
    			attrs_action = /*attrs*/ ctx[2].call(null, div1, /*$$props*/ ctx[3]) || ({});
    			current = true;
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot && default_slot.p && dirty & /*$$scope*/ 64) {
    				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[6], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null));
    			}

    			if (is_function(attrs_action.update) && dirty & /*$$props*/ 8) attrs_action.update.call(null, /*$$props*/ ctx[3]);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, { duration: 200 }, true);
    				div2_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, { duration: 200 }, false);
    			div2_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			if (default_slot) default_slot.d(detaching);
    			if (events_action && is_function(events_action.destroy)) events_action.destroy();
    			if (attrs_action && is_function(attrs_action.destroy)) attrs_action.destroy();
    			if (detaching && div2_transition) div2_transition.end();
    			dispose();
    		}
    	};
    }

    function create_fragment$f(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*open*/ ctx[0] && create_if_block$8(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (/*open*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    					transition_in(if_block, 1);
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { open = false } = $$props;
    	const events = getEventsAction(current_component);
    	const attrs = getAttributesAction(current_component);
    	let is_header = $$props.$$slots.header !== undefined;
    	let is_footer = $$props.$$slots.footer !== undefined;
    	let { $$slots = {}, $$scope } = $$props;
    	const click_handler = e => $$invalidate(0, open = false);

    	$$self.$set = $$new_props => {
    		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("open" in $$new_props) $$invalidate(0, open = $$new_props.open);
    		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		open,
    		events,
    		attrs,
    		$$props,
    		is_header,
    		is_footer,
    		$$scope,
    		$$slots,
    		click_handler
    	];
    }

    class Modal extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-4lwi8h-style")) add_css$6();
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { open: 0 });
    	}
    }

    exports.Button = Button;
    exports.Card = Card;
    exports.Checkbox = Checkbox;
    exports.Col = Col;
    exports.Container = Container;
    exports.Details = Details;
    exports.Field = Field;
    exports.Icon = Icon;
    exports.Input = Input;
    exports.Modal = Modal;
    exports.Nav = Nav;
    exports.Radio = Radio;
    exports.Row = Row;
    exports.Tab = Tab;
    exports.Tabs = Tabs;
    exports.Tag = Tag;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
